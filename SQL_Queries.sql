-- Basic Queries

-- 1. List all unique cities where customers are located.
SELECT DISTINCT customer_city
FROM customers;

-- 2. Count the number of orders placed in 2017.
SELECT COUNT(order_id) AS num_orders_2017
FROM orders
WHERE YEAR(order_purchase_timestamp) = 2017;

-- 3. Find the total sales per category.
SELECT p.product_category AS product_category, ROUND(SUM(oi.price + oi.freight_value),2) AS category_sales -- if we want to include shipping cost as well
FROM products p
JOIN order_items oi ON oi.product_id = p.product_id
GROUP BY p.product_category
ORDER BY category_sales DESC;

SELECT p.product_category AS product_category, ROUND(SUM(oi.price),2) AS category_sales -- if we don't want to include shipping cost as well
FROM products p
JOIN order_items oi ON oi.product_id = p.product_id
GROUP BY p.product_category
ORDER BY category_sales DESC;

-- 4. Calculate the percentage of orders that were paid in installments.
SELECT 
COUNT((CASE WHEN payment_installments > 1 THEN order_id END))*100/COUNT(*) AS perc_of_installment_orders
FROM payments;

SELECT -- Considering payment_installments = 1 as installment as there are few rows with payment_installments = 0
COUNT((CASE WHEN payment_installments >= 1 THEN order_id END))*100/COUNT(*) AS perc_of_installment_orders
FROM payments;

-- 5. Count the number of customers from each state.
SELECT 
customer_state, COUNT(customer_id) AS num_customers
FROM customers
GROUP BY customer_state
ORDER BY num_customers DESC;

-- Intermediate Queries

-- 1. Calculate the number of orders per month in 2018.
WITH num_orders_2018 AS(
	SELECT 
	MONTHNAME(order_purchase_timestamp) AS month_of_2018, 
	MONTH(order_purchase_timestamp) AS month_num, 
	COUNT(order_id) AS num_orders
	FROM orders
	WHERE YEAR(order_purchase_timestamp) = 2018
	GROUP BY month_of_2018, month_num
	ORDER BY month_num
)
SELECT month_of_2018, num_orders 
FROM num_orders_2018;

-- 2. Find the average number of products per order, grouped by customer state.
WITH state_order_items AS (
SELECT 
c.customer_state, oi.order_id, COUNT(*) AS num_items
FROM order_items oi
JOIN orders o ON o.order_id = oi.order_id
JOIN customers c ON c.customer_id = o.customer_id
GROUP BY c.customer_state, oi.order_id
)
SELECT 
customer_state, AVG(num_items) AS avg_items_per_order
FROM state_order_items
GROUP BY customer_state
ORDER BY avg_items_per_order DESC;

-- 3. Calculate the percentage of total revenue contributed by each product category.
SELECT 
	p.product_category, 
    ROUND(SUM(oi.price)*100/(SELECT SUM(price) FROM order_items),2) AS perc_contribution_in_sales
FROM order_items oi
JOIN products p ON p.product_id = oi.product_id
GROUP BY p.product_category
ORDER BY perc_contribution_in_sales DESC;

-- 4. Identify the correlation between product price and the number of times a product has been purchased(total no. of products here will be from product_category)
SELECT 
	p.product_category, 
    COUNT(oi.product_id) AS total_items_puchased,
    ROUND(SUM(oi.price),2) AS sales_amount,
    ROUND(AVG(price),2) AS avg_price_per_item
FROM order_items oi
JOIN products p ON p.product_id = oi.product_id
GROUP BY p.product_category;
/*
Correlation in python - code

query = """SELECT 
	p.product_category, 
    COUNT(oi.product_id) AS total_items_puchased,
    ROUND(SUM(oi.price),2) AS sales_amount,
    ROUND(AVG(price),2) AS avg_price_per_item
FROM order_items oi
JOIN products p ON p.product_id = oi.product_id
GROUP BY p.product_category;"""

cur.execute(query)
data = cur.fetchall()
df = pd.DataFrame(data,columns = ["product_category", "total_items_puchased", "sales_amount", "avg_price_per_item"])
df.head()
import numpy as np
arr1 = df["total_items_puchased"]
arr2 = df["avg_price_per_item"]

a = np.corrcoef([arr1,arr2])
print(f"The correlation coefficient is \033[1m{round(a[0][-1],3)}\033[0m." )
*/

-- 5. Calculate the total revenue generated by each seller, and rank them by revenue.
SELECT 
	oi.seller_id, ROUND(SUM(payment_value),2) AS seller_revenue,
    DENSE_RANK() OVER(ORDER BY SUM(payment_value) DESC) AS seller_rank
FROM order_items oi
JOIN payments p ON p.order_id = oi.order_id
GROUP BY oi.seller_id;

-- Advanced Queries

-- 1. Calculate the moving average of order values for each customer over their order history.(say moving average of last 3 orders)
SELECT 
t.customer_id, t.order_purchase_timestamp, t.payment_value, customer_order_count, moving_avg_3_orders
FROM(SELECT 
	o.customer_id, o.order_purchase_timestamp, p.payment_value,
    COUNT(*) OVER (PARTITION BY o.customer_id) AS customer_order_count,
    ROUND(AVG(p.payment_value)OVER(PARTITION BY o.customer_id ORDER BY o.order_purchase_timestamp ROWS 
    BETWEEN 2 PRECEDING AND CURRENT ROW),2)  AS moving_avg_3_orders
	FROM orders o 
    JOIN payments p ON p.order_id = o.order_id) AS t
WHERE customer_order_count > 1
-- customers with More than 1 order will be filtered and 
-- hence moving average will be calculated as per 2, 3, 4 or more orders
;

-- 2. Calculate the cumulative sales per month for each year.
WITH monthly_sales AS (
SELECT 
	YEAR(o.order_purchase_timestamp) AS year, MONTH(o.order_purchase_timestamp) AS month_num, MONTHNAME(o.order_purchase_timestamp) AS month,
    ROUND(SUM(p.payment_value),2) AS monthly_sales
FROM orders o 
JOIN payments p ON p.order_id = o.order_id
GROUP BY year, month_num, month
ORDER BY year, month_num
)
SELECT 
	year, month, monthly_sales,
    ROUND(SUM(monthly_sales) OVER(ORDER BY year, month_num),2) AS monthly_cumulative_sales    
    FROM monthly_sales;

-- 3. Calculate the year-over-year growth rate of total sales.
SELECT 
	year, yearly_sales, previous_year_sales,
    ROUND((yearly_sales - previous_year_sales)*100/previous_year_sales,2) AS YoY_growth_percent
FROM (SELECT 
		YEAR(o.order_purchase_timestamp) AS year, ROUND(SUM(p.payment_value),2) AS yearly_sales,
		LAG(ROUND(SUM(p.payment_value),2),1) OVER(ORDER BY YEAR(o.order_purchase_timestamp)) AS previous_year_sales
		FROM orders o
		JOIN payments p ON p.order_id = o.order_id
		GROUP BY year) AS year_sale;

-- 4. Calculate the month_on_month growth rate of total sales.
WITH monthly_sales AS (
SELECT 
	YEAR(o.order_purchase_timestamp) AS year, MONTH(o.order_purchase_timestamp) AS month_num, MONTHNAME(o.order_purchase_timestamp) AS month,
    ROUND(SUM(p.payment_value),2) AS monthly_sales
FROM orders o 
JOIN payments p ON p.order_id = o.order_id
GROUP BY year, month_num, month
ORDER BY year, month_num
)
SELECT 
	year, month, monthly_sales,
    LAG(monthly_sales,1) OVER(ORDER BY year, month_num) AS prev_month_sale,
    ROUND((monthly_sales - LAG(monthly_sales,1) OVER(ORDER BY year, month_num))*100/LAG(monthly_sales,1) OVER(ORDER BY year, month_num),2) AS
    Mom_growth
    FROM monthly_sales;

-- 5. Identify the top 3 customers who spent the most money in each year.
WITH customer_spending AS (SELECT 
	YEAR(o.order_purchase_timestamp) AS year,
    o.customer_id, ROUND(SUM(p.payment_value),2) AS spent,
    -- Don't partition by customer_id because then every customer will be assigned a new group and respective rank i.e. 1
    DENSE_RANK() OVER(PARTITION BY YEAR(o.order_purchase_timestamp) ORDER BY ROUND(SUM(p.payment_value),2) DESC) AS customer_rank_in_year
FROM orders o
JOIN payments p ON p.order_id = o.order_id
GROUP BY year, o.customer_id
ORDER BY year)
SELECT 
	year, customer_id, spent, customer_rank_in_year
FROM customer_spending
WHERE customer_rank_in_year <= 3;
